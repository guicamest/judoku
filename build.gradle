/* For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.6/userguide/java_library_plugin.html
 */

version = '2.0'

buildscript {
    ext.kotlin_version = '1.2.51'

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
        classpath 'com.kncept.junit5.reporter:junit-reporter:1.1.0'
    }
}

apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'com.kncept.junit5.reporter'
// More info @ https://docs.gradle.org/current/userguide/application_plugin.html
// See also: https://docs.gradle.org/current/userguide/distribution_plugin.html
apply plugin: 'application'

compileKotlin {
    kotlinOptions {
        includeRuntime = true
        noStdlib = false
    }
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-runtime"
    compile "org.jetbrains.kotlin:kotlin-stdlib"
    //compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile 'commons-cli:commons-cli:1.4'
    compile 'com.google.code.gson:gson:2.7'

    testCompile "org.jetbrains.kotlin:kotlin-test"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit"

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    //api 'org.apache.commons:commons-math3:3.6.1'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
}

test {
    useJUnitPlatform()
}

// For application plugin
mainClassName = 'cmd.JudokuKt'

jar {
    manifest {
        attributes 'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Implementation-Vendor': 'Copyright 2018 Steve Ball <jetpants@gmail.com>',
            'Main-Class': mainClassName
    }
}

afterEvaluate {
    tasks['installDist'].doLast {
        def taskOutput = outputs
        copy {
            from taskOutput
            into projectDir
        }
    }
}